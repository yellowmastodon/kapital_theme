<?php

/**
 * Block editor (gutenberg) specific functionality
 *
 */


/**
 * General (non-block-dependent) editor scripts and styles
 * script changes taxonomy selectors
 * 
 */


function kapital_enqueue_editor_content_assets()
{
    $template_directory = get_template_directory_uri();
    $block_editor_path = $template_directory . '/block-editor/build/';
    $custom_editor_scripts_assets = require dirname(__FILE__) . '/build/custom-editor-scripts/index.asset.php';
    if (is_admin()) {
        wp_enqueue_script(
            'custom-editor-scripts',
            $block_editor_path . 'custom-editor-scripts/index.js',
            $custom_editor_scripts_assets['dependencies'],
            $custom_editor_scripts_assets['version']
        );
        wp_enqueue_style('styles', $template_directory . '/editor_styles.css?mod=' . filemtime(get_stylesheet_directory() . '/editor_styles.css'), [], null);
    }
}


/**
 * Add inline svg to gutenberg editor, so that icons are erndered correctly
 * Hook into the 'admin_notices' action to render
 */
function kapital_block_editor_inline_svg()
{
    $screen = get_current_screen();
    // Only render this notice in the post editor.
    if (! $screen || 'post' !== $screen->base) {
        return;
    }
    // Render the notice's HTML.
    // with a 'notice' class.
    get_template_part('template-parts/inline-svg-icons');
};
add_action('admin_notices', 'kapital_block_editor_inline_svg');


add_action('enqueue_block_editor_assets', 'kapital_enqueue_editor_content_assets');

/**
 * Block editor (gutenberg) color palette synced from sass
 *
 */

add_action('after_setup_theme', 'kapital_block_editor_setup');

function kapital_block_editor_setup()
{
    $color_palette = generate_color_palette();
    if ($color_palette) {
        add_theme_support('editor-color-palette', $color_palette);
    }
}

//defined in includes/custom_meta.php
global $post_types_with_controlled_rendering;
global $pagenow;
if (is_admin() && in_array($pagenow, array('post.php', 'post-new.php'))) {
    wp_register_script('post-types-with-controlled-rendering', ''); //dummy handler to be able to add inline script
    wp_enqueue_script('post-types-with-controlled-rendering');
    wp_add_inline_script('post-types-with-controlled-rendering', 'var postTypesWithControlledRendering = ' . json_encode($post_types_with_controlled_rendering) . ';', 'before');
}

/**
 * Checks for our JSON file of color values. If exists, creates a color palette array.
 *
 *
 * @return array
 */
function generate_color_palette()
{
    $color_palette = array();
    // Grabs the autogenerated color palette that we're pulling from our compiled bootstrap stylesheets.
    $file_path = dirname(__FILE__) . '/custom-color-palette.json';
    $color_palette_json = file_get_contents($file_path); // phpcs:ignore WordPress.WP.AlternativeFunctions.file_get_contents_file_get_contents
    if ($color_palette_json) {
        $color_palette_json = json_decode($color_palette_json, true, 512);
        foreach ($color_palette_json["variables"][0]["mapValue"] as $color) {
            $color_palette[] = array(
                'name'  => $color["name"],
                'slug'  => $color["name"],
                'color' => $color["compiledValue"],
            );
        }
    }
    return $color_palette;
}

//add_filter( 'block_type_metadata', 'set_image_auto_wide' );

function set_image_auto_wide($metadata)
{
    //var_dump($metadata["name"]);
    //var_dump($metadata);
    if ("core/image" == $metadata['name']) {
        $metadata['attributes']['className']['default'] = "alignwide";
        $metadata['attributes']['align']['default'] = "alignwide";
        return $metadata;
        //var_dump($metadata['attributes']);
    }
    //var_dump($metadata);
    return $metadata;
}



/** Require all blocks
 */

require_once(dirname(__FILE__) . '/build/blocks/secondary-title/index.php');
require_once(dirname(__FILE__) . '/build/blocks/perex/index.php');
require_once(dirname(__FILE__) . '/build/blocks/ad/index.php');
require_once(dirname(__FILE__) . '/build/blocks/post-query/index.php');
require_once(dirname(__FILE__) . '/build/blocks/featured-post/index.php');
require_once(dirname(__FILE__) . '/build/blocks/podcast-links/index.php');
require_once(dirname(__FILE__) . '/build/blocks/page-links/index.php');
require_once(dirname(__FILE__) . '/build/blocks/event-data/index.php');

require_once(dirname(__FILE__) . '/build/blocks/sponsors/index.php');
require_once(dirname(__FILE__) . '/build/blocks/donation-form/index.php');
require_once(dirname(__FILE__) . '/build/blocks/book-query/index.php');
require_once(dirname(__FILE__) . '/build/blocks/recommendations/index.php');


require_once(dirname(__FILE__) . '/build/block-mods/button.php');
require_once(dirname(__FILE__) . '/build/block-mods/bubble-heading.php');
require_once(dirname(__FILE__) . '/build/block-mods/image.php');
require_once(dirname(__FILE__) . '/build/block-mods/gallery.php');



add_action('admin_head', 'custom_root_font_size');
/* fix for rem definitions */
function custom_root_font_size()
{
    echo '<style>
     :root {
        font-size: clamp(1rem, 0.29vi + 0.94rem, 1.19rem);
     } 
   </style>';
}

//register "question" - otazka paragraph block style (indent)
//on init to allow translation
add_action('init', function(){
    if (function_exists('register_block_style')) {
            register_block_style(
                'core/paragraph',
                array(
                    'name'         => 'otazka',
                    'label'        => esc_html__('OtÃ¡zka', 'kapital'),
                    'inline_style' => 'p.is-style-otazka { padding-left: 1.5rem; }',
                )
            );
    }
});